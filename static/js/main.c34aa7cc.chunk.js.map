{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Dot","props","width","height","x","y","fill","stroke","onClick","Display","viewBox","columns","size","rows","dotWidth","dotHeight","id","dots","map","dot","index","i","row","Math","floor","column","lighting","renderDot","Board","handleClick","state","slice","setState","Array","Object","assign","boardProps","version","xmlns","this","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAGA,SAASA,EAAIC,GACX,OACE,sBAAMC,MAAOD,EAAMC,MAAOC,OAAQF,EAAME,OAAQC,EAAGH,EAAMG,EAAGC,EAAGJ,EAAMI,EAAGC,KAAML,EAAMK,KAAMC,OAAQN,EAAMM,OAAQC,QAASP,EAAMO,UAInI,SAASC,EAAQR,GACf,IAAMG,EAASH,EAAMS,QAAQN,EACvBC,EAASJ,EAAMS,QAAQL,EACvBH,EAASD,EAAMS,QAAQR,MACvBC,EAASF,EAAMS,QAAQP,OAEvBQ,EAAUV,EAAMW,KAAKD,QACrBE,EAAUZ,EAAMW,KAAKC,KAErBC,EAAYZ,EAASS,EACrBI,EAAYZ,EAASU,EAqB3B,OACE,mBAAGG,GAAG,UAAN,SAJOf,EAAMgB,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAhBxB,SAAoBC,GAClB,IAAMF,EAAMlB,EAAMgB,KAAKI,GACjBC,EAAMC,KAAKC,MAAMH,EAAIV,GACrBc,EAASJ,EAAIV,EACnB,OACE,cAACX,EAAD,CACEE,MAAOY,EAAUX,OAAQY,EACzBX,EAAGA,EAAIU,EAAWW,EAAQpB,EAAGA,EAAIU,EAAYO,EAC7ChB,KAAMa,EAAIO,SAAW,UAAY,UAAWnB,OAAO,UACnDC,QAAS,kBAAMP,EAAMO,QAAQa,MAOKM,CAAUP,Q,IAU9CQ,E,kDAEJ,WAAY3B,GAAQ,IAAD,uBACjB,cAAMA,IAsBR4B,YAAc,SAACR,GACb,IAAMJ,EAAO,EAAKa,MAAMb,KAAKc,QAC7Bd,EAAKI,GAAGK,UAAYT,EAAKI,GAAGK,SAC5B,EAAKM,SAAS,CAACf,KAAMA,KAxBrB,IAAME,EAAM,CAACO,UAAU,GAFN,OAIjB,EAAKI,MAAQ,CACXb,KAAMgB,MAAM,KAAS3B,OAAOY,KAAI,kBAAMgB,OAAOC,OAAO,GAAIhB,OAG1D,EAAKiB,WAAa,CAChB1B,QAAS,CACPN,EAAG,EACHC,EAAG,EACHH,MAAQ,IACRC,OAAQ,KAGVS,KAAM,CACJC,KAAM,GACNF,QAAS,KAlBI,E,qDA8BjB,OACE,qBAAK0B,QAAQ,MAAMC,MAAM,6BAA6BpC,MAAM,OAAOC,OAAO,OAA1E,SACE,cAACM,EAAD,CACEQ,KAAMsB,KAAKT,MAAMb,KACjBP,QAAS6B,KAAKH,WAAW1B,QACzBE,KAAM2B,KAAKH,WAAWxB,KACtBJ,QAAS+B,KAAKV,oB,GAtCJW,IAAMC,WAqDXC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCnFSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c34aa7cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Dot(props) {\r\n  return (\r\n    <rect width={props.width} height={props.height} x={props.x} y={props.y} fill={props.fill} stroke={props.stroke} onClick={props.onClick}/>\r\n  );\r\n}\r\n\r\nfunction Display(props) {\r\n  const x      = props.viewBox.x;\r\n  const y      = props.viewBox.y;\r\n  const width  = props.viewBox.width;\r\n  const height = props.viewBox.height;\r\n  \r\n  const columns = props.size.columns;\r\n  const rows    = props.size.rows;\r\n\r\n  const dotWidth  = width  / columns;\r\n  const dotHeight = height / rows;\r\n\r\n  function renderDot (i) {\r\n    const dot = props.dots[i];\r\n    const row = Math.floor(i / columns);\r\n    const column = i % columns;\r\n    return (\r\n      <Dot\r\n        width={dotWidth} height={dotHeight}\r\n        x={x + dotWidth * column} y={y + dotHeight * row}\r\n        fill={dot.lighting ? \"#ff0000\" : \"#ffffff\"} stroke=\"#000000\"\r\n        onClick={() => props.onClick(i)} \r\n      />\r\n    );\r\n  };\r\n\r\n  function renderAllDot() {\r\n    // TODO listをpropsから取得する\r\n    return props.dots.map((dot, index) => renderDot(index));\r\n  }\r\n\r\n  return (\r\n    <g id=\"display\">\r\n      {renderAllDot()}\r\n    </g>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  // TODO ドットを複製する\r\n  constructor(props) {\r\n    super(props);\r\n    const dot = {lighting: false, };\r\n\r\n    this.state = {\r\n      dots: Array(21 * 26).fill().map(() => Object.assign({}, dot)),\r\n    };\r\n\r\n    this.boardProps = {\r\n      viewBox: {\r\n        x: 0,\r\n        y: 0,\r\n        width:  520,\r\n        height: 420,\r\n      },\r\n      // 個数を表すいい英語を名づける\r\n      size: {\r\n        rows: 21,\r\n        columns: 26,\r\n      },\r\n    };\r\n  }\r\n\r\n  handleClick = (i) => {\r\n    const dots = this.state.dots.slice();\r\n    dots[i].lighting = !dots[i].lighting\r\n    this.setState({dots: dots})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2600\" height=\"2100\">\r\n        <Display\r\n          dots={this.state.dots}\r\n          viewBox={this.boardProps.viewBox}\r\n          size={this.boardProps.size}\r\n          onClick={this.handleClick}\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}